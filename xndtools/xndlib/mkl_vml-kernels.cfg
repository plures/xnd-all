#
#  Kernels of Intel MKL Vector Mathematical Functions
#
#  Created: July 2018
#  Author: Pearu Peterson
#

[MODULE mkl_vml]
typemaps:
	float: float32
	double: float64

includes:
	mkl_vml_functions.h
	nothing.h

kinds: C
ellipses: none

[KERNEL nothing]
description: Doing nothing
prototypes:
	void vsNothing(const int n, const float a[], float r[]);
	void vdNothing(const int n, const double a[], double r[]);
input_arguments: a(n)
output_arguments: r(n)
hide_arguments: n = len(a)

[KERNEL nothing_inout]
description: Doing nothing
prototypes:
	void vsNothing(const int n, const float a[], float r[]);
	void vdNothing(const int n, const double a[], double r[]);
input_arguments: a(n)
inout_arguments: r(n)
hide_arguments: n = len(a)

[KERNEL copy]
description: Copy using memcpy
prototypes:
	void vsCopy(const int n, const float a[], float r[]);
	void vdCopy(const int n, const double a[], double r[]);
input_arguments: a(n)
output_arguments: r(n)
hide_arguments: n = len(a)

[KERNEL copy_inout]
description: Copy using memcpy
prototypes:
	void vsCopy(const int n, const float a[], float r[]);
	void vdCopy(const int n, const double a[], double r[]);
input_arguments: a(n)
inout_arguments: r(n)
hide_arguments: n = len(a)

[KERNEL mycopy]
description: Doing nothing
prototypes:
	void vsMyCopy(const int n, const float a[], float r[]);
	void vdMyCopy(const int n, const double a[], double r[]);
input_arguments: a(n)
output_arguments: r(n)
hide_arguments: n = len(a)

[KERNEL mycopy_inout]
description: Doing nothing
prototypes:
	void vsMyCopy(const int n, const float a[], float r[]);
	void vdMyCopy(const int n, const double a[], double r[]);
input_arguments: a(n)
inout_arguments: r(n)
hide_arguments: n = len(a)

[KERNEL abs]
description: Absolute value: r[i] = |a[i]|
prototypes:
	void vsAbs(const int n, const float a[], float r[]);
	void vdAbs(const int n, const double a[], double r[]);
input_arguments: a(n)
output_arguments: r(n)
hide_arguments: n = len(a)

[KERNEL exp]
description: Exponential function: r[i] = e^a[i]
prototypes:
	void vsExp (const int n, const float a[], float r[]);
	void vdExp (const int n, const double a[], double r[]);
input_arguments: a(n)
output_arguments: r(n)
hide_arguments: n = len(a)


[KERNEL exp_inout]
description: Exponential function: r[i] = e^a[i]
prototypes:
	void vsExp (const int n, const float a[], float r[]);
	void vdExp (const int n, const double a[], double r[]);
input_arguments: a(n)
inout_arguments: r(n)
hide_arguments: n = len(a)


[KERNEL myexp]
description: Exponential function: r[i] = e^a[i]
prototypes:
	void vsMyExp (const int n, const float a[], float r[]);
	void vdMyExp (const int n, const double a[], double r[]);
input_arguments: a(n)
output_arguments: r(n)
hide_arguments: n = len(a)


[KERNEL myexp_inout]
description: Exponential function: r[i] = e^a[i]
prototypes:
	void vsMyExp (const int n, const float a[], float r[]);
	void vdMyExp (const int n, const double a[], double r[]);
input_arguments: a(n)
inout_arguments: r(n)
hide_arguments: n = len(a)
